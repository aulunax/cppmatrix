from typing import Any, ClassVar

from typing import overload

class Dimensions:
    __hash__: ClassVar[None] = ...
    m: int
    n: int
    def __init__(self, arg0: int, arg1: int) -> None: ...
    def __eq__(self, arg0: Dimensions) -> bool: ...
    def __ne__(self, arg0: Dimensions) -> bool: ...

class Matrix:
    __hash__: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: float) -> None: ...
    @overload
    def __init__(self, arg0: Dimensions) -> None: ...
    @overload
    def __init__(self, arg0: Dimensions, arg1: float) -> None: ...
    @overload
    def __init__(self, arg0: Matrix) -> None: ...
    def addMatrices(self, *args, **kwargs) -> Any: ...
    def diag(self, arg0: int) -> Matrix: ...
    def divideByConstant(self, *args, **kwargs) -> Any: ...
    def fill(self, arg0: int, arg1: int, arg2: float) -> None: ...
    def fillWithValue(self, *args, **kwargs) -> Any: ...
    def gaussianElimination(self, *args, **kwargs) -> Any: ...
    def getDiagonal(self, *args, **kwargs) -> Any: ...
    def getTransposed(self, *args, **kwargs) -> Any: ...
    def getTriangle(self, *args, **kwargs) -> Any: ...
    def multiplyByConstant(self, *args, **kwargs) -> Any: ...
    def multiplyMatrices(self, *args, **kwargs) -> Any: ...
    def print(self) -> None: ...
    def reserve(self, arg0: int, arg1: int) -> None: ...
    def substractMatrices(self, *args, **kwargs) -> Any: ...
    def threadedMatrixOperation(self, arg0: Matrix, arg1: Matrix, arg2, arg3: Dimensions) -> Matrix: ...
    def transpose(self) -> Matrix: ...
    def tril(self, arg0: int) -> Matrix: ...
    def triu(self, arg0: int) -> Matrix: ...
    def __add__(self, arg0: Matrix) -> Matrix: ...
    def __copy__(self) -> Matrix: ...
    def __deepcopy__(self, arg0: dict) -> Matrix: ...
    def __eq__(self, arg0: Matrix) -> bool: ...
    def __getitem__(self, arg0: Dimensions) -> float: ...
    @overload
    def __mul__(self, arg0: Matrix) -> Matrix: ...
    @overload
    def __mul__(self, arg0: float) -> Matrix: ...
    def __ne__(self, arg0: Matrix) -> bool: ...
    def __neg__(self) -> Matrix: ...
    def __or__(self, arg0: Matrix) -> Matrix: ...
    def __sub__(self, arg0: Matrix) -> Matrix: ...
    @overload
    def __truediv__(self, arg0: float) -> Matrix: ...
    @overload
    def __truediv__(self, arg0: Matrix) -> Matrix: ...

class MatrixEquationNoUniqueSolutionException(Exception): ...

class MatrixSizeDisparityException(Exception): ...

class NotSquareMatrixException(Exception): ...
